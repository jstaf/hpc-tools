#!/usr/bin/env python3

# A helper script to convert old SGE scripts to their new fancy SLURM equivalents. Specific to the CAC cluster, but
# should be fairly easy to modify if so inclined (see MAPPINGS dictionary).

# Jeff Stafford - CAC

import sys
import re
import argparse
import os

SGE_RE = re.compile('^#\$ ')
SLURM_FLAG = '#SBATCH '

# add slurm to SGE mappings here:
# note: if not in this dictionary, the SGE flag simply gets removed
MAPPINGS = {
    '-l mf=(\d+)[gG]':
        lambda val: '--mem=' + str(float(val) * 1000),
    '-pe \w+ (\d+)':
        lambda val: '-c ' + str(val),
    '(-o \w+)':
        lambda val: val,
    '(-e \w+)':
        lambda val: val,
    '-M (\w+@\w+(\.\w+)*)':
        lambda val: '--mail-address=' + str(val),
    '-m ([beas]+)':
        lambda val: '--mail-type=' + mail_flags(val)
}


# because python is a terrible language that seemingly can't handle simple things like multi-line lambdas
def mail_flags(flags):
    new_flags = []
    if 'b' in flags:
        new_flags.append('BEGIN')
    if 'e' in flags:
        new_flags.append('END')
    if 'a' in flags or 's' in flags:
        new_flags.append('FAIL')

    flags_str = ','.join(new_flags)
    if flags_str == 'BEGIN,END,FAIL':
        flags_str = 'ALL'

    return flags_str


# parse args
def main(args):
    parser = argparse.ArgumentParser(
        description='Converts old Sun Grid Engine (SGE) job scripts to their fancy schmancy SLURM equivalents')
    parser.add_argument('input_sge', nargs=1, help='path/name of SGE job script to convert')
    parser.add_argument('output_slurm', nargs='?', help='Output SLURM job script')
    argv = parser.parse_args()

    if not os.path.exists(argv.input_sge[0]):
        sys.exit("ERROR: You must specify a path to a valid SGE job script.")
    if argv.output_slurm is None:
        output_slurm = re.sub("\.sh", "-slurm.sh", argv.input_sge[0])
        print("No output file name specified, using '" + output_slurm + "' for output.")
    else:
        output_slurm = argv.output_slurm[0]

    # okay, we now have valid inputs, parse away
    convert(argv.input_sge[0], output_slurm)


# do the sge -> slurm conversion
def convert(in_path, out_path):
    fin = open(in_path, 'r')
    fout = open(out_path, 'w')

    for line in fin:
        # only convert lines beginning with '#$'
        if re.match(SGE_RE, line) is not None:
            # strip '#$' and replace with '#SBATCH'
            line = re.sub(SGE_RE, "", line)

            line = parse(line)
            if line is not None:  # check to make sure match was returned
                fout.write(SLURM_FLAG + line + '\n')
        else:
            fout.write(line)

    fin.close()
    fout.close()


def parse(string):
    for key in MAPPINGS.keys():
        capture = re.search(key, string)
        if capture is not None:
            return MAPPINGS[key](capture.group(1))
    return None


if __name__ == '__main__':
    main(sys.argv)
