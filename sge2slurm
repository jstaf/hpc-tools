#!/usr/bin/env python3

# A helper script to convert old SGE scripts to their new fancy SLURM equivalents. Specific to the CAC cluster, but
# should be fairly easy to modify if so inclined (see MAPPINGS dictionary).

# Jeff Stafford - CAC

import sys
import re
import argparse
import os

SGE_RE = re.compile('^#\$ ')
JOB_ID_RE = re.compile('\$JOB_ID')
SLURM_FLAG = '#SBATCH '

# Add slurm to SGE mappings here:
# Note: if not in this dictionary, the SGE flag simply gets removed. Some flags have been intentionally left out
# (like -cwd) because they are simply SLURM's default behavior.
MAPPINGS = {
    '-l\s+mf=(\d+)[gG]{1}':         # mem request
        lambda val: '--mem=' + str(int(val) * 1000),
    '-l\s+mem=(\d+)':               # alternate mem request
        lambda val: '--mem=' + val,
    '-pe\s+\S+\s+(\d+)':            # number of processors
        lambda val: '-c ' + val,
    '(-[oe]\s+\S+)':                # stdout/stderr log
        lambda val: re.sub(JOB_ID_RE, '%j', val),
    '-M\s+(\w+@\w+(\S\w+)*)':       # mail address
        lambda val: '--mail-address=' + val,
    '-m\s+([beas]+)':               # mail type
        lambda val: '--mail-type=' + mail_flags(val),
    '-N\s+(\S+)':                   # job name
        lambda val: '-J ' + val,
    '-l\s+hostname=(\S+)':          # hardcoded hostname
        lambda val: '-w ' + val,
    '-wd\s+(\S+)':                  # working directory change
        lambda val: '-D ' + val,
    '-t\s+(\d+-\d+:\d+)':           # array job
        lambda val: '--array=' + val,
    '(-A\s+\S+)':                   # accounting id
        lambda val: val,
    '-l\s+h[_ ]rt\s+(\d+:\d+:\d+)': # walltime
        lambda val: val
}

# because python is a terrible language that seemingly can't handle simple things like multi-line lambdas
def mail_flags(flags):
    new_flags = []
    if 'b' in flags:
        new_flags.append('BEGIN')
    if 'e' in flags:
        new_flags.append('END')
    if 'a' in flags or 's' in flags:
        new_flags.append('FAIL')

    flags_str = ','.join(new_flags)
    if flags_str == 'BEGIN,END,FAIL':
        flags_str = 'ALL'

    return flags_str


# parse args
def main(args):
    parser = argparse.ArgumentParser(
        description='Converts old Sun Grid Engine (SGE) job scripts to their fancy schmancy SLURM equivalents')
    parser.add_argument('input_sge', nargs=1, help='path/name of SGE job script to convert')
    parser.add_argument('output_slurm', nargs='?', help='Output SLURM job script')
    argv = parser.parse_args()

    if not os.path.exists(argv.input_sge[0]):
        sys.exit("ERROR: You must specify a path to a valid SGE job script.")
    if argv.output_slurm is None:
        output_slurm = re.sub("\.sh", "-slurm.sh", argv.input_sge[0])
        print("No output file name specified, using '" + output_slurm + "' for output.\n")
    else:
        output_slurm = argv.output_slurm

    # okay, we now have valid inputs, parse away
    convert(argv.input_sge[0], output_slurm)
    check(output_slurm)
    print('\nJob will use the default queue unless changed with "#SBATCH -p partitionName".')
    print('Run "sinfo" to see a list of available partitions.')


def convert(in_path, out_path):
    """
    Do the sge -> slurm conversion
    :param in_path: sge filepath
    :param out_path: slurm filepath
    """
    fin = open(in_path, 'r')
    fout = open(out_path, 'w')
    nslots = re.compile('\$NSLOTS')
    sge_task_id = re.compile('\$SGE_TASK_ID')

    for line in fin:
        # only convert lines beginning with '#$'
        if re.match(SGE_RE, line) is not None:
            # strip '#$'
            line = re.sub(SGE_RE, "", line)
            line = parse(line)
            if line is not None:  # check to make sure match was returned
                fout.write(SLURM_FLAG + line + '\n')
        else:
            # find and replace some key environment variables people use
            line = re.sub(nslots, '$SLURM_JOB_CPUS_PER_NODE', line)
            line = re.sub(sge_task_id, '$SLURM_ARRAY_TASK_ID', line)
            fout.write(line)

    fin.close()
    fout.close()


def check(slurm):
    """
    Check to make sure people specified all mandatory resource flags, and if not, add them.
    :param slurm:
    """
    cpus = False
    mem = False
    wall = False

    with open(slurm, 'r') as fin:
        for line in fin:
            if '#SBATCH -c' in line:
                cpus = True
            if '#SBATCH --mem' in line:
                mem = True
            if '#SBATCH -t' in line:
                wall = True

    if not cpus:
        print('WARNING: No CPUs requested, unless changed with "#SBATCH -c cpus", your job will be assigned 1 CPU by default.')
    if not mem:
        print('WARNING: No memory requested, unless changed with "#SBATCH --mem=megabytes", your job will be killed if it exceeds 6GB of RAM')
    if not wall:
        print('WARNING: No walltime requested, unless changed with "#SBATCH -t HH:MM:SS", your job will only run for 6 hours.')


def parse(string):
    """
    Map SGE flags to SLURM flags
    :param string: input line
    :return: SLURMified output line
    """
    for key in MAPPINGS.keys():
        capture = re.search(key, string)
        if capture is not None:
            return MAPPINGS[key](capture.group(1))
    return None


if __name__ == '__main__':
    main(sys.argv)
