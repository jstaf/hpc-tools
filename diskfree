#!/usr/bin/env python3

import argparse
import sys
import re
import smtplib
import socket
from email.mime.text import MIMEText
import psutil
import pandas as pd

sizes = ['B', 'K', 'M', 'G', 'T', 'P', 'E']

def main():
    ###########################################
    # argument parsing
    parser = argparse.ArgumentParser(description='Get disk usage for a given partition (or all partitions). Can send emails if disk space goes below a given threshold.')
    parser.add_argument('partition', nargs='?',
                        help='Partition to check space on. All partitions will be checked if this option is not used.')
    parser.add_argument('-s', '--size', nargs=1, choices=sizes, 
                        help='Disk usage should be reported in this increment.')
    parser.add_argument('-t', '--threshold-free', nargs=1, type=str,
                        help='Threshold of free disk space to send emails at (eg. 20G free space left).')
    parser.add_argument('-p', '--percent-free', nargs=1, type=float, 
                        help='Percentage free threshold to send emails at (eg. 10 percent of total space left).')
    parser.add_argument('-m', '--email', nargs=1, type=str,
                        help='Comma-delimited list of addresses to send email to if thresholds are passed.')
    parser.add_argument('-H', '--host', nargs=1, type=str, default='localhost',
                        help='Server mailserver to send messages through. Defaults to localhost.')
    parser.add_argument('-P', '--port', nargs=1, type=int, default=25,
                        help='Mailserver SMTP port. Defaults to 25.')
    argv = parser.parse_args()

    # make sure partitions are valid
    partitions = argv.partition
    all_partitions = [diskpart.mountpoint for diskpart in psutil.disk_partitions(all=True) if '/' in diskpart.device]
    if partitions is None:
        partitions = all_partitions
    elif partitions not in all_partitions:
        sys.exit('Partition "' + partitions + '" not a valid partition. Must be one of: "' + '", "'.join(all_partitions) + '"')
    
    # make sure size increments are valid if they exist
    increment = argv.size
    if increment is not None:
        increment = increment[0].upper()

    # make sure an email has been provided if diskfree has been setup to email at a threshold
    if (argv.percent_free is not None or argv.threshold_free is not None) and argv.email is None:
        sys.exit('Error: Email address must be set if using a threshold option.')
    if (argv.percent_free is None and argv.threshold_free is None) and argv.email is not None:
        sys.exit('Error: A threshold must be set to use emailing utility.')

    #######################################
    # get partition stats
    partstats = get_partition_free(partitions, increment=increment)

    if argv.email is not None:
        # check to see if the partition(s) in question failed the check
        failed = set()
        if argv.percent_free is not None:
            failed.update(partstats.index[partstats['percent'] < argv.percent_free].format())
        if argv.threshold_free is not None:            
            failed.update(partstats.index[partstats['free'].apply(dehumanize) < dehumanize(argv.threshold_free)].format())

        if len(failed) > 0:
            # send an email with full disk usages and highlight which partitions failed the check
            hostname = socket.gethostname()

            email = MIMEText('<p>Partition ' + ', '.join(failed) + ' on ' + hostname + ' has passed a disk usage threshold.</p>' + \
                             '<p>All disks:</p>' + get_partition_free(all_partitions).to_html(), 'html')
            email['Subject'] = 'Disk threshold passed on ' + hostname
            email['From'] = 'noreply@localhost.' + socket.getfqdn()
            
            # send message to all recipients
            server = smtplib.SMTP(host=argv.host[0], port=argv.port)
            for to in argv.email[0].split(','):
                email['To'] = to
                server.send_message(email)
            server.quit()

    else:
        # just print output
        print(partstats)


def get_partition_free(partitions, increment=None):
    '''
    Returns a dataframe analogous to 'df -h' on UNIX.
    '''
    if not isinstance(partitions, list):
        partitions = [partitions]
    partstats = []
    for partition in partitions:
        partstats.append(psutil.disk_usage(partition))
    partstats = pd.DataFrame(partstats, index=partitions)
    partstats['percent'] = 100. - partstats['percent']
    partstats[['total', 'used', 'free']] = partstats[['total', 'used', 'free']].applymap(lambda cell: humanize(cell, increment))
    return partstats


def humanize(num_bytes, size=None):
    '''
    Convert an arbitrary number of bytes to human-readable form.

    @param size: A scale factor (B, M, K, G, etc.)
    '''
    if size is not None:
        converted = round(num_bytes / 1024 ** sizes.index(size), 1)
        return re.sub(r'\.0', '', str(converted) + size)
    else:
        for factor in reversed(range(len(sizes))):
            converted = round(num_bytes / 1024 ** factor, 1)
            if converted >= 1:
                return re.sub(r'\.0', '', str(converted) + sizes[factor])


def dehumanize(byte_string):
    '''
    Convert a humanized bytestring (eg. 18.5T) to number of bytes
    '''
    byte_string = str(byte_string)  # just in case
    factor = 0
    for scale in reversed(range(len(sizes))):
        if sizes[scale] in byte_string:
            factor = scale
            break       
    number = float(re.findall(r'[0-9]+\.?[0-9]*', byte_string)[0])
    return int(number * 1024 ** factor)


if __name__ == '__main__':
    main()
