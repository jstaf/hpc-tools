#!/usr/bin/env python3

# This is a parallel wrapper around SSH to be used on a cluster.
# Wait, isn't this just a copy of pssh? Yes, yes it is. 
# Written to be slightly easier to use, and also works on a Solaris box I have lurking about.

import argparse
import os
import getpass
import asyncio
from asyncio.subprocess import PIPE
import sys

class TColors:
    """
    A bunch of escape sequences for terminal formatting.
    """

    PURPLE = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    END = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


    def fmt(text, style):
        style = ''.join(style)
        return style + text + TColors.END


    def demo():
        print(TColors.PURPLE + 'purple')
        print(TColors.BLUE + 'blue')
        print(TColors.GREEN + 'green')
        print(TColors.YELLOW + 'yellow')
        print(TColors.RED + 'red' + TColors.END)
        print(TColors.BOLD + 'bold')
        print(TColors.UNDERLINE + 'underline')
        print(TColors.END + 'end')


def main(): 
    parser = argparse.ArgumentParser(description='Run an SSH command in parallel across a set of nodes')
    parser.add_argument('nodes', nargs=1, type=str,
                        help='A comma-seperated list of nodes or path to a file with a nodelist (one line per node).')
    parser.add_argument('command', nargs='+', type=str, 
                        help='Command to be run')
    parser.add_argument('-u', '--user', nargs=1, type=str, default=getpass.getuser(), 
                        help='User to connect as. Defaults to current user.')
    parser.add_argument('-q', '--quiet', default=False, const=True, action='store_const', 
                        help="Don't print messages from stdout on target machines.")
    parser.add_argument('-o', '--option', nargs=1, 
                        help='Options to be passed to SSH')
    argv = parser.parse_args()

    # get all nodes to ssh to
    nodes_arg = argv.nodes[0]
    if os.path.exists(nodes_arg):
        # we were given a nodelist file
        nodes = []
        with open(nodes_arg) as nodelist:
            for line in nodelist:
                nodes.append(line.strip())
    else:
        # we were given a comma-separated list of nodes
        nodes = nodes_arg.split(',')

    # create async tasks and run them
    loop = asyncio.get_event_loop()
    tasks = [asyncio.async(
        ssh(node, ' '.join(argv.command), user=''.join(argv.user), quiet=argv.quiet)
        ) for node in nodes]
    finished, unfinished = loop.run_until_complete(asyncio.wait(tasks))
    loop.close()

    # print number of completed tasks
    codes = [process.result()[1] for process in finished]
    print(TColors.fmt('{} of {} tasks completed successfully!'.format(codes.count(0), len(tasks)), TColors.BOLD), 
        file=sys.stderr)
    
    # identify failing nodes
    failures = set(filter(lambda process: process.result()[1] != 0, finished))
    failures = [failure.result()[0] for failure in failures].sort()
    if len(failures) != 0:
        print(TColors.fmt('\nFailed nodes: ' + ','.join(failures), TColors.BOLD), file=sys.stderr)


@asyncio.coroutine
def ssh(host, command, user=getpass.getuser(), quiet=False):
    """
    This runs wraps and runs the SSH command for each node
    """

    command = ' '.join(['ssh -x -o ConnectTimeout=10 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null', user + '@' + host, command])
    process = yield from asyncio.create_subprocess_shell(command, stdout=PIPE, stderr=PIPE)
    stdout, stderr = yield from process.communicate()  # wait for process to finish

    # write pretty status message
    code = process.returncode
    if code == 0:
        print(TColors.fmt(host + '...', TColors.BOLD), TColors.fmt('[SUCCESS]', [TColors.BOLD, TColors.GREEN]), file=sys.stderr)
    elif 'timed out' in stderr.decode('utf-8').lower(): 
        print(TColors.fmt(host + '...', TColors.BOLD), TColors.fmt('[TIMEOUT]', [TColors.BOLD, TColors.YELLOW]), file=sys.stderr)
    else:
        print(TColors.fmt(host + '...', TColors.BOLD), TColors.fmt('[FAILURE]', [TColors.BOLD, TColors.RED]), file=sys.stderr)

    if not quiet:
        print(stdout.decode('utf-8'), end='')
    print(stderr.decode('utf-8'), end='', file=sys.stderr)

    return host, code
    

if __name__ == '__main__':
    main()
